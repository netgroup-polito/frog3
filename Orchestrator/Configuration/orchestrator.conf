################################################################################################################
##############                                                                                    ##############
##############                                       WARNING                                      ##############
##############    Not delete any field, if you want delete debug level for log, set it to false   ##############
##############                                                                                    ##############
################################################################################################################

[orchestrator]
port = 8000
isp = true
nobody = false
debug_mode = false

[log]
log_file=FrogOrchestrator.log
verbose=true
debug=true

[drivers]
# Now only one driver is supported; or HeatCA or UnifiedNode
# example: drivers = HeatCA, UnifiedNode
drivers = HeatCA
#drivers = UnifiedNode

[authentication]
# controller openstack
server = http://controller:35357

orch_username = admin
orch_password = SDN@Edge_Polito
orch_tenant = admin

admin_tenant_name = admin
admin_user = SDN@Edge_Polito
admin_password = stack

[nobody]
username = nobody
password = stack
tenant = nobody
email = prova@example.org
role = _member_
sw_endpoint = 192.168.4.5
description = authencticatio_user
[ISP]
username = isp
password = stack	
tenant = isp
email = isp@example.com
role = _member_
file = isp_graph.json
description = isp_user

[db]
# controller openstack
connection = mysql://orchestrator:SDN@Edge_Polito@controller/orchestrator



[unify]
#example: endpoint $endpoint1, $endpoint2
#endpoints = http://130.192.225.185:8080
endpoints = http://192.168.1.110:8080
number_of_endpoint = 3


[user_connection]
# Heat --> ingress_port = INGRESS_veth1
# UN --> ingress_port = ge3

# DEPRECATED
ingress_type = physical
ingress_port = to-br-usr

# DEPRECATED
egress_type = physical
egress_port = em1

#ingress_port= ge3
#ingress_port = INGRESS_veth1


# define priority of the ingress flow
flow_priority = 2

[constraints]
maximum_number_of_vnf_in_graph = 1000

[switch]
#template = http://130.192.225.193:9292/v2/images/483ae2c1-9c8b-49c8-bfdb-b9626a768a18/file
template = switch.json

switch_l2_name = Switch
switch_l2_control_name = Control_Switch 

[flowrule]
default_priority = 20000

[endpoint_type]
# user_ingress identify the end points connected to USER interface.
user_ingress = INGRESS

# isp_egress identify the end points connected to WAN interface.
isp_egress = EGRESS

# user_egress identify the end points that should be connected to isp_ingress.
user_egress = ISP_CONNECTION

# isp_ingress identify the end points available for other graphs.
isp_ingress = ISP_INGRESS

# isp_egress identify the end points available for other graphs for control purposes.
control_ingress = USER_CONTROL_INGRESS

# isp_egress identify the end points that should be connected to control_ingress.
control_egress = USER_CONTROL_EGRESS

# sg_user_egress identify the end points of the user service graph.
# used to connect other subgraph at the ingress of user service graph.
sg_user_ingress = USER_INGRESS

# sg_user_egress identify the end points of the user service graph.
# used to connect other subgraph at the exit of user service graph.
sg_user_egress = USER_EGRESS


[ingress_nf_fg]
file = ingress_graph_user.json

[engress_nf_fg]
file = egress_graph_user.json

[templates]
# source=glance or source=file
source=file

# only in case source=file
path=Templates/

[odl]
endpoint = http://odl:8080

# virtual switch where virtual machines are connected
integration_bridge = br-int

# virtual switch responsible for the user outgoing traffic
exit_switch = br-ex

# virtual switch responsible for the user ingoing traffic
ingress_switch = br-usr
