##########################################################################################
####   					  Service Layer & Global Orchestrator  						  ####
##########################################################################################

##########################################################################################


Installation
	
	* Required command to launch to install required python library (Tested on 
	ubuntu 14.04.1)
		
		* install python
			sudo apt-get install python-dev python-setuptools

		* if pip is not installed install pip
			sudo easy_install pip
		
		* install core component
			sudo apt-get install python-sqlalchemy libmysqlclient-dev
			sudo pip install --upgrade cython falcon requests gunicorn jsonschema 
					mysql-python json_hyper_schema
	
	DATABASE (on OpenStack controller node):
		
		* Creation:
			mysql -u root -p
		
			CREATE DATABASE orchestrator;
			CREATE TABLE IF NOT EXISTS `component_adapter` (
  			  `session_id` varchar(64) NOT NULL,
			  `extra` mediumtext NOT NULL,
			  PRIMARY KEY (`session_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `endpoint` (
			  `Graph_ID` varchar(64) NOT NULL,
			  `Endpoint_ID` varchar(64) NOT NULL,
			  `Available` tinyint(1) NOT NULL,
			  `Name` varchar(64) NOT NULL,
			  `ID` varchar(64) NOT NULL,
			  `Type` varchar(64) DEFAULT NULL,
			  `Graph_ID_connected` varchar(64) DEFAULT NULL,
			  `Endpoint_ID_connected` varchar(64) DEFAULT NULL,
			  PRIMARY KEY (`Graph_ID`,`Endpoint_ID`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `node` (
			  `node_id` varchar(64) NOT NULL,
			  `node_name` varchar(64) NOT NULL,
			  `ip_address` varchar(64) DEFAULT NULL,
			  `avaibility_zone` varchar(64) DEFAULT NULL,
			  PRIMARY KEY (`node_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `nodes_egress_interface` (
			  `node_id` varchar(64) NOT NULL,
			  `interface` varchar(64) NOT NULL,
			  PRIMARY KEY (`node_id`,`interface`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `nodes_ingress_interface` (
			  `node_id` varchar(64) NOT NULL,
			  `interface` varchar(64) NOT NULL,
			  PRIMARY KEY (`node_id`,`interface`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `profile` (
			  `id` varchar(64) NOT NULL,
			  `profile` text,
			  PRIMARY KEY (`id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `session` (
			  `id` varchar(64) NOT NULL,
			  `user_id` varchar(64) DEFAULT NULL,
			  `mac_address` text,
			  `session_info` text,
			  `profile` text,
			  `infrastructure` text,
			  `ingress_node` varchar(64) DEFAULT NULL,
			  `egress_node` varchar(64) DEFAULT NULL,
			  `started` datetime DEFAULT NULL,
			  `last_update` datetime DEFAULT NULL,
			  `error` datetime DEFAULT NULL,
			  `ended` datetime DEFAULT NULL,
			  PRIMARY KEY (`id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			CREATE TABLE IF NOT EXISTS `user_location` (
			  `user_id` varchar(64) NOT NULL,
			  `node_id` varchar(64) NOT NULL,
			  PRIMARY KEY (`user_id`,`node_id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8;
			exit
	
		* Change the configuration file with IP address of the Openstack controller,
		 access credentials and the physical interface for the users. You can find it in
		  Orchestrator/Configuration/orchestrator.conf.

		* Change the image id into the "Templates" directory with the IDs assigned from
		 Openstack to the images loaded and set the address of the controller into file 
		 hosts.
		
		* Create a keystone user for every graph you want to instantiate (NFV graphs are 
		thought to belong users).

		* Load the users profiles into the database. At the moment these profiles are 
		written in json files but soon the extension for Horizon, which allows users to 
		create their graph, will be completed. They can be found in the 
		"Orchestrator/Graphs" folder and they have to be loaded in the user-profile table 
		contained into keystone database. The Create Profile folder contains a simple php
		 web page thatallows admin to create graphs by copy and paste from the json files. 
		As an alternative you can use phpmyadmin to enter that table and manually insert 
		the user id and profile, pasting the whole content of the corrisponding json file.

	OVS compute node configuration:
	
		* You need to add an additional OVS virtual bridge on the compute node; it is used
		 to give an access point that connects users and their graphs. There is a script 
		 named "create_bridge_usr" into the folder "Scripts" that creates the bridge and
		 links it to the internal Openstack bridge (br-int).

			cd Scripts/
			sudo ./create_bridge_usr
		
		* After that, you can find this new bridge in your OVS configuration. Now you have
		 to link it to all the physical interfaces you want to use for users access. 
		 For example:
		
			sudo ovs-vsctl add-port br-usr eth1

##########################################################################################
	
Start-up:

	* Run orchestrator service layer
	
		cd Orchestrator
		./start_orchestrator_in_screen.sh
	
	* To instantiate an example user:
		
		cd Scripts
		python instantiate.py <user> <tenant> <pwd> <mac_address>
	  
	  these instantiation scripts need to be configured with the credentials of their user
	  (simply open them and change the parameters user, tenant and password)

	* To remove these stack (DO NOT DELETE STACKS FROM HORIZON):

		python delete_only_nat.py or python delete_firewall.py

##########################################################################################
		
Complete documentation available at https://netgroup.polito.it/research-projects/sdn-edge.