#############################################################################################
####					                                                                #####
####		                   		    WARNING                                         #####
####  Do not delete any field, if you want delete debug level for log, set it to false  #####
#### 	                                                             			        #####
#############################################################################################
[service_layer_application]
port = 8000

[orchestrator]
port = 9000
ip = 127.0.0.1

# Timeout after that the connection with the orchestrator have to be closed
timeout = 3600000

# Modality in which must be a service graph available to connect other service layer.
# The isp graph will be instantiated at the startup of the orchestrator.
# Not all service graph will be connected to the isp graph, this connection depends by the
# endpoints of the sigle service graph.
isp = false

# The nobody's graph will be instantiated at the startup of the orchestrator.
nobody = false

# In this modality, no one service graph will be really instantiated, but the nf-fg created
# will be logged in the FrogOrchestrator.log.
debug_mode = false

[log]
# Location of the log file
log_file=FrogServiceLayer.log

# Log levels
verbose=true
debug=true

[drivers]
# Currently only one driver at a time is supported;  HeatCA, UniversalNodeCA or JolnetCA.
# HeatCA identifies the OpenStack based prototype, otherwise UniversalNodeCA represents the 
# universal node realised in the european project UNIFY.
<<<<<<< HEAD:Orchestrator/Configuration/orchestrator.conf.openstack
# example: drivers = HeatCA, UniversalNodeCA
drivers = HeatCA
#drivers = UniversalNodeCA
=======
# example: drivers = HeatCA, UniversalNodeCA, JolnetCA
drivers = HeatCA
>>>>>>> stable_new_backend:ServiceLayer/UserDefinedServiceFunctions/Configuration/service_layer.conf

[authentication]
# Identify the Keystone endpoint. It is used, both to authenticate the requests towards 
# the orchestrator and OpenStack ant to obtain the service graph associated to a user. 
server = http://192.168.0.6:35357


# An OpenStack (keystone) admin user is needed to create new users
orch_username = admin
orch_password = SDN@Edge_Polito
orch_tenant = admin

admin_tenant_name = admin
admin_user = SDN@Edge_Polito
admin_password = stack

[nobody]
# Info of the user associated to the authentication graph
username = nobody
password = stack
tenant = nobody
email = prova@example.org
role = _member_
sw_endpoint = 192.168.4.5
description = authencticatio_user

[ISP]
# Info of the user associated to the shared graph
username = isp
password = stack	
tenant = isp
email = isp@example.com
role = _member_
file = isp_graph.json
description = isp_user

[db]
# Mysql DB
connection = mysql://orchestrator:SDN@Edge_Polito@192.168.0.6/orchestrator


[JolnetCA]
# Allow to choose whether involving Heat in deployment process or 
# directly call Nova and Neutron (better choice!)
use_heat = false

# Specifies the default availability zone for ISP graph
isp_availability_zone = AZ_TI

[UniversalNodeCA]
# Section dedicated to the Universal node (UNIFY)
# example: endpoints $endpoint
endpoints = http://192.168.1.110:8080

# Define the number of endpoints available in the ISP graph
number_of_endpoint = 3

[user_connection]
# Ingress type define the type of the port used to receive the user traffic.
# physical means that is a virtual port.
ingress_type = ingress_interface
# Name of the virtual port connected to the user
ingress_port = to-br-usr
# Egress type define the type of the port used to connect the graph to the Internet.
# physical means that is a virtual port.
egress_type = egress_interface
# Name of the virtual port connected to the WAN
egress_port = em1

# Define the default priority of the ingress flow
flow_priority = 2

[constraints]
maximum_number_of_vnf_in_graph = 1000

[templates]
# Define the source where the templates can be achieved. This source can it be, 'glance' 
# or 'file' (that identify the file system)
source=file

# Should be set only in case source=file
path=Templates/

[switch]
# Template of a VNF that acts as a switch.
#template = http://130.192.225.193:9292/v2/images/483ae2c1-9c8b-49c8-bfdb-b9626a768a18/file
template = switch.json

switch_l2_name = Switch
switch_l2_control_name = Control_Switch 

[flowrule]
# Define the default priority for the flows in the NF-FG
default_priority = 20000

[endpoint_type]
# user_ingress identify the end points connected to USER interface.
user_ingress = INGRESS

# isp_egress identify the end points connected to WAN interface.
isp_egress = EGRESS

# user_egress identify the end points that should be connected to isp_ingress.
user_egress = ISP_CONNECTION

# isp_ingress identify the end points available for other graphs.
isp_ingress = ISP_INGRESS

# isp_egress identify the end points available for other graphs for control purposes.
control_ingress = USER_CONTROL_INGRESS

# isp_egress identify the end points that should be connected to control_ingress.
control_egress = USER_CONTROL_EGRESS

# sg_user_egress identify the end points of the user service graph.
# used to connect other subgraph at the ingress of user service graph.
sg_user_ingress = USER_INGRESS

# sg_user_egress identify the end points of the user service graph.
# used to connect other subgraph at the exit of user service graph.
sg_user_egress = USER_EGRESS


[ingress_nf_fg]
file = ingress_graph_user.json

[engress_nf_fg]
file = egress_graph_user.json

[odl]
# OpenDayLight endpoint(s)
endpoint = http://192.168.0.4:8080
endpoint2 = http://jolnet-odl:8181

odl_user = admin
odl_password = admin

# Virtual switch where virtual machines are connected
integration_bridge = br-int

# virtual switch responsible for the user outgoing traffic
exit_switch = br-ex

# virtual switch responsible for the user ingoing traffic
ingress_switch = br-usr
